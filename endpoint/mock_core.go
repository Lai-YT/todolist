// Code generated by MockGen. DO NOT EDIT.
// Source: core/core.go
//
// Generated by this command:
//
//	mockgen -source=core/core.go -destination=endpoint/mock_core.go -package=endpoint
//

// Package endpoint is a generated GoMock package.
package endpoint

import (
	reflect "reflect"
	core "todolist/core"

	gomock "go.uber.org/mock/gomock"
)

// MockCore is a mock of Core interface.
type MockCore struct {
	ctrl     *gomock.Controller
	recorder *MockCoreMockRecorder
}

// MockCoreMockRecorder is the mock recorder for MockCore.
type MockCoreMockRecorder struct {
	mock *MockCore
}

// NewMockCore creates a new mock instance.
func NewMockCore(ctrl *gomock.Controller) *MockCore {
	mock := &MockCore{ctrl: ctrl}
	mock.recorder = &MockCoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCore) EXPECT() *MockCoreMockRecorder {
	return m.recorder
}

// CreateItem mocks base method.
func (m *MockCore) CreateItem(description string) core.TodoItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", description)
	ret0, _ := ret[0].(core.TodoItem)
	return ret0
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockCoreMockRecorder) CreateItem(description any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockCore)(nil).CreateItem), description)
}

// DeleteItem mocks base method.
func (m *MockCore) DeleteItem(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockCoreMockRecorder) DeleteItem(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockCore)(nil).DeleteItem), id)
}

// GetItems mocks base method.
func (m *MockCore) GetItems(completed bool) []core.TodoItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems", completed)
	ret0, _ := ret[0].([]core.TodoItem)
	return ret0
}

// GetItems indicates an expected call of GetItems.
func (mr *MockCoreMockRecorder) GetItems(completed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockCore)(nil).GetItems), completed)
}

// UpdateItem mocks base method.
func (m *MockCore) UpdateItem(id int, completed bool) (core.TodoItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", id, completed)
	ret0, _ := ret[0].(core.TodoItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockCoreMockRecorder) UpdateItem(id, completed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockCore)(nil).UpdateItem), id, completed)
}
