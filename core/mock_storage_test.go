// Code generated by MockGen. DO NOT EDIT.
// Source: core/storage.go
//
// Generated by this command:
//
//	mockgen -source=core/storage.go -destination=core/mock_storage_test.go -package=core_test
//

// Package core_test is a generated GoMock package.
package core_test

import (
	reflect "reflect"

	core "todolist/core"

	gomock "go.uber.org/mock/gomock"
)

// MockStorageAccessor is a mock of StorageAccessor interface.
type MockStorageAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockStorageAccessorMockRecorder
}

// MockStorageAccessorMockRecorder is the mock recorder for MockStorageAccessor.
type MockStorageAccessorMockRecorder struct {
	mock *MockStorageAccessor
}

// NewMockStorageAccessor creates a new mock instance.
func NewMockStorageAccessor(ctrl *gomock.Controller) *MockStorageAccessor {
	mock := &MockStorageAccessor{ctrl: ctrl}
	mock.recorder = &MockStorageAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageAccessor) EXPECT() *MockStorageAccessorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStorageAccessor) Create(arg0 *core.TodoItem) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockStorageAccessorMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorageAccessor)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockStorageAccessor) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageAccessorMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageAccessor)(nil).Delete), id)
}

// Read mocks base method.
func (m *MockStorageAccessor) Read(where func(core.TodoItem) bool) []core.TodoItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", where)
	ret0, _ := ret[0].([]core.TodoItem)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockStorageAccessorMockRecorder) Read(where any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStorageAccessor)(nil).Read), where)
}

// Update mocks base method.
func (m *MockStorageAccessor) Update(todo core.TodoItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStorageAccessorMockRecorder) Update(todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorageAccessor)(nil).Update), todo)
}
